//
//  NSObject+PreventSpil.m
//  RJLTestPro
//
//  Created by mini on 16/5/20.
//  Copyright © 2016年 renjialiang. All rights reserved.
//

#import "NSObject+PreventSpil.h"
#import <objc/runtime.h>
@implementation NSObject (PreventSpil)
//+(void)load
//{
//	static dispatch_once_t onceToken;
//	dispatch_once(&onceToken, ^{
//		[self swizzleSEL:@selector(forwardInvocation:) withSEL:@selector(swizzled_forwardInvocation:)];
//		[self swizzleSEL:@selector(respondsToSelector:) withSEL:@selector(swizzled_respondsToSelector:)];
//		[self swizzleSEL:@selector(resolveClassMethod:) withSEL:@selector(swizzled_resolveClassMethod:)];
//		[self swizzleSEL:@selector(forwardingTargetForSelector:) withSEL:@selector(swizzled_forwardingTargetForSelector:)];
//		[self swizzleSEL:@selector(methodSignatureForSelector:) withSEL:@selector(swizzled_methodSignatureForSelector:)];
//	});
//}

-(BOOL)swizzled_respondsToSelector:(SEL)aSelector
{
	return [self swizzled_respondsToSelector:aSelector];
}

- (NSMethodSignature*)swizzled_methodSignatureForSelector:(SEL)selector
{
	NSMethodSignature* methodSign = [self swizzled_methodSignatureForSelector:selector];
	if(methodSign == nil)
	{
		methodSign = [self methodSignatureForSelector:@selector(unusemethod)];
	}
	return methodSign;
}

- (id)unusemethod
{
	return nil;
}

- (id)swizzled_forwardingTargetForSelector:(SEL)aSelector
{
	return [self swizzled_forwardingTargetForSelector:aSelector];
}

- (void)swizzled_forwardInvocation:(NSInvocation*)invocation
{
	if ([self respondsToSelector:@selector(unusemethod)])
	{
		[invocation setSelector:@selector(unusemethod)];
		[invocation invokeWithTarget:self];
	}
}


+ (void)swizzleSEL:(SEL)originalSEL withSEL:(SEL)swizzledSEL {
	Class class = [self class];
	
	Method originalMethod = class_getInstanceMethod(class, originalSEL);
	Method swizzledMethod = class_getInstanceMethod(class, swizzledSEL);
	
	BOOL didAddMethod =
	class_addMethod(class,
					originalSEL,
					method_getImplementation(swizzledMethod),
					method_getTypeEncoding(swizzledMethod));
	
	if (didAddMethod) {
		class_replaceMethod(class,
							swizzledSEL,
							method_getImplementation(originalMethod),
							method_getTypeEncoding(originalMethod));
	} else {
		method_exchangeImplementations(originalMethod, swizzledMethod);
	}
}
@end
